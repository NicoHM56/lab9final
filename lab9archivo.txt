/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "fatfs.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "fatfs_sd.h"
#include "string.h"
#include "stdio.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
FATFS fatfs_volume;
FATFS *fatfs_ptr;
FIL fatfs_file;
FRESULT fatfs_result;
DWORD fatfs_free_clusters;
uint32_t sd_total_kb, sd_free_kb;
char uart_buf[100];
char uart_rx; // Esto es para el UART de Hercules
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
SPI_HandleTypeDef spi_sd;   // SPI para la microSD
UART_HandleTypeDef uart_console;  // UART de consola

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_SPI1_Init(void);
/* USER CODE BEGIN PFP */
void uart_print(char *string);
void show_menu(void);
void read_text_file(char *filename);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void uart_print(char *string){
    uint8_t len = strlen(string);
    HAL_UART_Transmit(&uart_console, (uint8_t*)string, len, 200);
}

void show_menu(void){
    uart_print("       selecciona una de las 3 opciones: \r\n");
    uart_print("1. Ver el polloa\r\n");
    uart_print("2. Ver el pato\r\n");
    uart_print("3. Ver el paloma\r\n");
    uart_print("-------------------------------------\r\n");
    uart_print("Seleccione una opcion (coloque el numero): ");
}

void read_text_file(char *filename){
    char line[100];

    fatfs_result = f_open(&fatfs_file, filename, FA_READ);
    if (fatfs_result == FR_OK){
        sprintf(uart_buf, "\r\n Listo, ya abierto %s\r\n", filename);
        uart_print(uart_buf);

        while (f_gets(line, sizeof(line), &fatfs_file)){
            uart_print(line);
        }

        f_close(&fatfs_file);
        uart_print("\r\n listo\r\n");
    }
    else {
        sprintf(uart_buf, "No se puede abrir %s\r\n", filename);
        uart_print(uart_buf);
    }
}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  MX_GPIO_Init();
  MX_USART2_UART_Init();
  MX_SPI1_Init();
  MX_FATFS_Init();

  /* USER CODE BEGIN 2 */
  HAL_Delay(500);
  uart_print("\r\n Iniciando...\r\n");

  fatfs_result = f_mount(&fatfs_volume, "/", 0);
  if (fatfs_result == FR_OK)
      uart_print("MicroSD\r\n");
  else
      uart_print("Error\r\n");

  show_menu();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      HAL_UART_Receive(&uart_console, (uint8_t*)&uart_rx, 1, HAL_MAX_DELAY);

      switch (uart_rx){
      case '1':
          read_text_file("pollo.txt");
          break;
      case '2':
          read_text_file("pato.txt");
          break;
      case '3':
          read_text_file("paloma.txt");
          break;
      default:
          uart_print("\r\n no es una opcion valida, seleccione otra.\r\n");
          break;
      }

      show_menu();
  }
  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
  /* SPI1 parameter configuration*/
  spi_sd.Instance = SPI1;
  spi_sd.Init.Mode = SPI_MODE_MASTER;
  spi_sd.Init.Direction = SPI_DIRECTION_2LINES;
  spi_sd.Init.DataSize = SPI_DATASIZE_8BIT;
  spi_sd.Init.CLKPolarity = SPI_POLARITY_LOW;
  spi_sd.Init.CLKPhase = SPI_PHASE_1EDGE;
  spi_sd.Init.NSS = SPI_NSS_SOFT;
  spi_sd.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
  spi_sd.Init.FirstBit = SPI_FIRSTBIT_MSB;
  spi_sd.Init.TIMode = SPI_TIMODE_DISABLE;
  spi_sd.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  spi_sd.Init.CRCPolynomial = 10;
  if (HAL_SPI_Init(&spi_sd) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
  uart_console.Instance = USART2;
  uart_console.Init.BaudRate = 115200;
  uart_console.Init.WordLength = UART_WORDLENGTH_8B;
  uart_console.Init.StopBits = UART_STOPBITS_1;
  uart_console.Init.Parity = UART_PARITY_NONE;
  uart_console.Init.Mode = UART_MODE_TX_RX;
  uart_console.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  uart_console.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&uart_console) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_SS_GPIO_Port, SD_SS_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : SD_SS_Pin */
  GPIO_InitStruct.Pin = SD_SS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
  HAL_GPIO_Init(SD_SS_GPIO_Port, &GPIO_InitStruct);
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
}
#ifdef USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
}
#endif /* USE_FULL_ASSERT */
